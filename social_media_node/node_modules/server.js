const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Database connection
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'user_management'
});

db.connect(err => {
    if (err) throw err;
    console.log('Connected to database');
});

// Register Route
app.post('/register', (req, res) => {
    const { username, password, email } = req.body;
    bcrypt.hash(password, 10, (err, hashedPassword) => {
        if (err) throw err;
        db.query('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', [username, hashedPassword, email], (err, result) => {
            if (err) throw err;
            res.send('User registered');
        });
    });
});

// Login Route
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    db.query('SELECT * FROM users WHERE username = ?', [username], (err, results) => {
        if (err) throw err;
        if (results.length === 0) return res.status(401).send('User not found');
        
        bcrypt.compare(password, results[0].password, (err, isMatch) => {
            if (err) throw err;
            if (!isMatch) return res.status(401).send('Invalid password');
            
            const token = jwt.sign({ id: results[0].id }, 'secret_key', { expiresIn: '1h' });
            res.json({ token });
        });
    });
});

// Profile Route
app.get('/profile', (req, res) => {
    const token = req.headers['authorization'];
    if (!token) return res.status(401).send('No token provided');

    jwt.verify(token, 'secret_key', (err, decoded) => {
        if (err) return res.status(500).send('Failed to authenticate token');
        
        db.query('SELECT * FROM users WHERE id = ?', [decoded.id], (err, results) => {
            if (err) throw err;
            res.json(results[0]);
        });
    });
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});
